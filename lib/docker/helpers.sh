#!/bin/bash

# Verifica se Docker est√° rodando
check_docker_daemon() {
    # Mensagem inicial explicativa
    echo -e "\n${CYBER_BLUE}üîç Verificando o status do Docker...${RESET}"
    echo -e "${CYBER_YELLOW}‚ñ∂ Esta opera√ß√£o requer privil√©gios de root para verificar/iniciar o servi√ßo Docker.${RESET}"
    echo -e "${CYBER_YELLOW}‚ñ∂ Voc√™ pode precisar digitar sua senha de administrador.${RESET}\n"

    # Verifica se o Docker est√° respondendo (sem sudo primeiro)
    if docker ps >/dev/null 2>&1; then
        echo -e "${CYBER_GREEN}‚úî Docker est√° rodando e acess√≠vel sem privil√©gios root!${RESET}"
        return 0
    fi

    # Verifica com sudo se necess√°rio
    if sudo docker ps >/dev/null 2>&1; then
        echo -e "${CYBER_GREEN}‚úî Docker est√° rodando (acesso requer privil√©gios root).${RESET}"
        echo -e "${CYBER_YELLOW}‚ö† Dica: Adicione seu usu√°rio ao grupo docker para evitar usar sudo:"
        echo -e "  sudo usermod -aG docker \$USER${RESET}"
        return 0
    fi

    echo -e "${CYBER_RED}‚ö°Ô∏è Docker n√£o est√° respondendo!${RESET}"

    # Verifica se est√° instalado
    if ! command -v docker &>/dev/null; then
        echo -e "${CYBER_RED}‚úñ Docker n√£o est√° instalado no sistema!${RESET}"
        echo -e "${CYBER_BLUE}‚ñ∂ Por favor instale o Docker antes de continuar.${RESET}"
        exit 1
    fi

    # Verifica status do servi√ßo
    local service_status="unknown"
    if command -v systemctl &>/dev/null; then
        echo -e "${CYBER_BLUE}‚ñ∂ Verificando status do servi√ßo...${RESET}"
        service_status=$(sudo systemctl is-active docker 2>/dev/null || echo "inactive")
    fi

    case $service_status in
        active)
            echo -e "${CYBER_YELLOW}‚ö† Docker est√° ativo mas n√£o responde. Tentando reiniciar...${RESET}"
            sudo systemctl restart docker
            sleep 3
            ;;
        inactive)
            echo -e "${CYBER_YELLOW}‚ñ∂ O servi√ßo Docker est√° parado.${RESET}"
            read -p "${CYBER_BLUE}? Deseja iniciar o servi√ßo Docker agora? (Y/n): ${RESET}" choice
            if [[ "$choice" =~ ^[Nn] ]]; then
                echo -e "${CYBER_YELLOW}‚ñ∂ Opera√ß√£o cancelada. O Docker precisa estar rodando.${RESET}"
                exit 1
            fi
            echo -e "${CYBER_YELLOW}‚ñ∂ Iniciando Docker...${RESET}"
            sudo systemctl start docker
            sleep 5  # D√° mais tempo para inicializa√ß√£o
            ;;
        *)
            echo -e "${CYBER_RED}‚úñ N√£o foi poss√≠vel verificar o status do servi√ßo.${RESET}"
            ;;
    esac

    # Verifica√ß√£o final
    echo -e "${CYBER_BLUE}‚ñ∂ Verificando conex√£o com Docker...${RESET}"
    if docker ps >/dev/null 2>&1 || sudo docker ps >/dev/null 2>&1; then
        echo -e "${CYBER_GREEN}‚úî Docker est√° respondendo com sucesso!${RESET}"
        return 0
    fi

    # Mensagens de erro detalhadas
    echo -e "\n${CYBER_RED}‚úñ Falha ao conectar ao Docker!${RESET}"
    echo -e "${CYBER_YELLOW}Poss√≠veis causas e solu√ß√µes:"
    echo -e "1. Servi√ßo n√£o iniciou corretamente:"
    echo -e "   sudo systemctl status docker"
    echo -e "2. Problemas de permiss√£o:"
    echo -e "   sudo usermod -aG docker \$USER"
    echo -e "   (voc√™ precisar√° fazer logout e login ap√≥s)"
    echo -e "3. Problema na instala√ß√£o:"
    echo -e "   Consulte https://docs.docker.com/engine/install/${RESET}"

    exit 1
}

# Formata saida do docker ps
format_container_info() {
    local container=$1
    local status=$(docker inspect --format '{{.State.Status}}' "$container")
    local color

    case $status in
        running) color="${CYBER_GREEN}" ;;
        exited) color="${CYBER_RED}" ;;
        paused) color="${CYBER_YELLOW}" ;;
        *) color="${CYBER_BLUE}" ;;
    esac

    echo "${color}${container}${RESET}"
}

# Filtra containers por status
filter_containers_by_status() {
    local status=$1
    docker ps --filter "status=$status" --format "{{.Names}}" | sort
}